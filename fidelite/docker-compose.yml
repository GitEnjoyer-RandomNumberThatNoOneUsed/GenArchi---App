version: '3.8'
services:
  frontend:
    image: node:18
    environment:
      APP_NAME: "frontend"
    entrypoint: ["sh", "-c", "cd /app; npm install; npm run dev"]
    container_name: frontend
    depends_on:
      - backend
    ports:
      - '80:5173'
    volumes:
      - ./frontend:/app
  
  backend:
    image: node:18.18-alpine
    entrypoint: ["sh", "-c", "cd /app; npm install; npx prisma generate; npx prisma migrate dev --name init; npm run start:dev"]
    container_name: backend
    depends_on:
      - db
      - rabbitmq
    ports:
      - '3000:3000'
    volumes:
      - ./backend:/app

  db:
    image: postgres:13
    container_name: database
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
    ports:
      - '5432:5432'
    volumes:
      - db-data:/var/lib/postgresql/data
  
  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    logging:
      driver: none

  
  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    logging:
      driver: none
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # Port pour AMQP
      - "15672:15672" # Port pour le management plugin
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    logging:
      driver: none

  kong:
    image: kong:latest
    container_name: kong
    environment:
      KONG_DATABASE: off
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
    ports:
      - 8000:8000  # Proxy port
      - 8443:8443  # Proxy SSL port
      - 8001:8001  # Admin API port
      - 8444:8444  # Admin API SSL port
    volumes:
      - ./kong.yml:/etc/kong/kong.yml

volumes:
  db-data:
